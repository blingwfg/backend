{
	"info": {
		"_postman_id": "28eab86a-e0b0-4cf6-a035-3e9e61d3f412",
		"name": "Notes API Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37614763"
	},
	"item": [
		{
			"name": "Adding Notes",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// pm.test('response Content-Type header should have application/json value', () => {\r",
							"//   pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"// });\r",
							"\r",
							"// pm.test('response body should an object', () => {\r",
							"//     const responseJson = pm.response.json();\r",
							"//     pm.expect(responseJson).to.be.an('object');\r",
							"// }); \r",
							"\r",
							"// pm.test('response body should have correct property and value', () => {\r",
							"//     const responseJson = pm.response.json();\r",
							"//     pm.expect(responseJson).to.ownProperty('status');\r",
							"//     pm.expect(responseJson.status).to.equals('success');\r",
							"//     pm.expect(responseJson).to.ownProperty('message');\r",
							"//     pm.expect(responseJson.message).to.equals('catatan berhasil ditambahkan');\r",
							"//     pm.expect(responseJson).to.ownProperty('data');\r",
							"//     pm.expect(responseJson.data).to.be.an('object');\r",
							"// });\r",
							"\r",
							"pm.test('response body data should have noteId property and not equal to empty', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data } = responseJson;\r",
							" \r",
							"    pm.expect(data).to.ownProperty('noteId');\r",
							"    pm.expect(data.noteId).to.not.equals('');\r",
							"    pm.environment.set('noteId', data.noteId);\r",
							"\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\":\"Belajar coding\",\r\n    \"tags\":[\"mudah\", \"gampang\"],\r\n    \"body\":\"mudah dan menyenangkan\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/notes",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Notes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"   pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"}); \r",
							"pm.test('response body should an object', () => {\r",
							"   const responseJson = pm.response.json();\r",
							"   pm.expect(responseJson).to.be.an('object');\r",
							"}); \r",
							"pm.test('response body should have the correct property and value', () => {\r",
							"  const responseJson = pm.response.json();\r",
							"   pm.expect(responseJson).to.have.ownProperty('status');\r",
							"   pm.expect(responseJson.status).to.equals('success');\r",
							"   pm.expect(responseJson).to.have.ownProperty('data');\r",
							"   pm.expect(responseJson.data).to.be.an('object');\r",
							"}); \r",
							"\r",
							"pm.test('should have array value', ()=>{\r",
							"    const responseJson = pm.response.json()\r",
							"    const {data} = responseJson\r",
							"    pm.expect(data).to.have.ownProperty('notes')\r",
							"       pm.expect(data.notes).to.be.an('array');\r",
							"   pm.expect(data.notes).lengthOf.at.least(1);\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/notes",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get spesifik",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('must 200 status', () =>{\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"pm.test('mush should application/json', ()=>{\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8')\r",
							"})\r",
							"pm.test('response body must object', ()=>{\r",
							"    const responsjson = pm.response.json()\r",
							"    pm.expect(responsjson).to.be.an('object')\r",
							"})\r",
							"pm.test('response body should have the correct property and value', () => {\r",
							"const responseJson = pm.response.json();\r",
							"pm.expect(responseJson).to.have.ownProperty('status')\r",
							"pm.expect(responseJson.status).to.equals('success')\r",
							"pm.expect(responseJson).to.have.ownProperty('data')\r",
							"pm.expect(responseJson.data).to.be.an('object')\r",
							"}); \r",
							"\r",
							"pm.test('response body data should contain note object', () => {\r",
							"const responseJson = pm.response.json();\r",
							"   const { data } = responseJson;\r",
							"   pm.expect(data).to.have.ownProperty('note')\r",
							"   pm.expect(data.note).to.be.an('object')\r",
							"});\r",
							"\r",
							"\r",
							"pm.test('note object should contain correct value for id, title, body, and tags property', () => {\r",
							" const responseJson = pm.response.json();\r",
							" const { data: { note } } = responseJson;\r",
							" \r",
							"const expectedId = pm.environment.get('noteId');\r",
							" const expectedTitle = 'Belajar coding';\r",
							" const expectedTags = [\"mudah\", \"gampang\"]\r",
							" const expectedBody = 'mudah dan menyenangkan';\r",
							"   pm.expect(note).to.have.ownProperty('id');\r",
							"   pm.expect(note.id).to.equals(expectedId);\r",
							"   pm.expect(note).to.have.ownProperty('title');\r",
							"   pm.expect(note.title).to.equals(expectedTitle);\r",
							"   pm.expect(note).to.have.ownProperty('tags');\r",
							"   pm.expect(note.tags).to.eql(expectedTags);\r",
							"   pm.expect(note).to.have.ownProperty('body');\r",
							"   pm.expect(note.body).to.equals(expectedBody);\r",
							"\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/notes/{{noteId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"notes",
						"{{noteId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update notes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 200 value', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							" pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8')\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"// const responseJson = pm.response.json();\r",
							"pm.expect(pm.response.json()).to.be.an('object')\r",
							"});\r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"   const responseJson = pm.response.json();\r",
							" \r",
							"   pm.expect(responseJson).to.have.ownProperty('status');\r",
							"   pm.expect(responseJson.status).to.equals('success');\r",
							"   pm.expect(responseJson).to.have.ownProperty('message');\r",
							"   pm.expect(responseJson.message).to.equals('Catatan berhasil diperbarui');\r",
							"});\r",
							"pm.test('when request the updated note', () => {\r",
							"    const noteId = pm.environment.get('noteId');\r",
							"    pm.sendRequest(`http://localhost:3000/notes/${noteId}`, (error, response) => {\r",
							"        if(!error) {\r",
							"            pm.test('then the updated note should contain the latest data', () => {\r",
							"                const responseJson = response.json();\r",
							"                const { data: { note } } = responseJson;\r",
							" \r",
							"                const expectedTitle = 'Catatan A Revised';\r",
							"                const expectedTags = ['Android', 'Web'];\r",
							"                const expectedBody = 'Isi dari Catatan A Revised';\r",
							" \r",
							"                pm.expect(note.title).to.equals(expectedTitle);\r",
							"                pm.expect(note.tags).to.eql(expectedTags);\r",
							"                pm.expect(note.body).to.equals(expectedBody);\r",
							"            });\r",
							"        }\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"Catatan A Revised\",\r\n    \"tags\": [\"Android\", \"Web\"],\r\n    \"body\": \"Isi dari Catatan A Revised\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/notes/{{noteId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"notes",
						"{{noteId}}"
					]
				}
			},
			"response": [
				{
					"name": "New Request",
					"originalRequest": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Catatan A Revised\",\r\n    \"tags\": [\"Android\", \"Web\"],\r\n    \"body\": \"Isi dari Catatan A Revised\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/notes/{{noteId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"notes",
								"{{noteId}}"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "content-type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "vary",
							"value": "origin"
						},
						{
							"key": "access-control-expose-headers",
							"value": "WWW-Authenticate,Server-Authorization"
						},
						{
							"key": "cache-control",
							"value": "no-cache"
						},
						{
							"key": "content-length",
							"value": "60"
						},
						{
							"key": "Date",
							"value": "Fri, 11 Oct 2024 13:06:00 GMT"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=5"
						}
					],
					"cookie": [],
					"body": "{\n    \"status\": \"success\",\n    \"message\": \"Catatan berhasil diperbarui\"\n}"
				}
			]
		},
		{
			"name": "New Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 200 value', () => {\r",
							"   pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"   pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8')\r",
							"}); \r",
							"pm.test('response body should be an object', () => {\r",
							"   const responseJson = pm.response.json();\r",
							"   pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"   const responseJson = pm.response.json();\r",
							" \r",
							"   pm.expect(responseJson).to.have.ownProperty('status');\r",
							"   pm.expect(responseJson.status).to.equals('success');\r",
							"   pm.expect(responseJson).to.have.ownProperty('message');\r",
							"   pm.expect(responseJson.message).to.equals('Catatan berhasil dihapus');\r",
							"}); \r",
							"pm.test('when request the deleted note', () => {\r",
							"    const noteId = pm.environment.get('noteId');\r",
							"    pm.sendRequest(`http://localhost:3000/notes/${noteId}`, (error, response) => {\r",
							"        if(!error) {\r",
							"            pm.test('the deleted note should be not found', () => {\r",
							"                pm.expect(response.code).to.equals(404);\r",
							"                const responseJson = response.json();\r",
							"                pm.expect(responseJson.status).to.equals('fail');\r",
							"                pm.expect(responseJson.message).to.equals('catatan tidak ditemukan');\r",
							"            });\r",
							"        }\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/notes/{{noteId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"notes",
						"{{noteId}}"
					]
				}
			},
			"response": []
		}
	]
}